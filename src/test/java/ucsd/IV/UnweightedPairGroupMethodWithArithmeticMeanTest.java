package ucsd.IV;

import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class UnweightedPairGroupMethodWithArithmeticMeanTest {
    private static Set<String> outputAsSet(String output) {
        return new HashSet<>(Arrays.asList(output.split("\n")));
    }

    @Test
    public void test() {
        String result = UnweightedPairGroupMethodWithArithmeticMean.doWork("src/test/resources/IV/sample/UnweightedPairGroupMethodWithArithmeticMean.txt");
        String expected =
                "0->5:7.000\n" +
                "1->6:8.833\n" +
                "2->4:5.000\n" +
                "3->4:5.000\n" +
                "4->2:5.000\n" +
                "4->3:5.000\n" +
                "4->5:2.000\n" +
                "5->0:7.000\n" +
                "5->4:2.000\n" +
                "5->6:1.833\n" +
                "6->5:1.833\n" +
                "6->1:8.833";
        Assert.assertEquals(outputAsSet(result), outputAsSet(expected));
    }

    @Test
    public void testExtra() {
        String result = UnweightedPairGroupMethodWithArithmeticMean.doWork("src/test/resources/IV/sample/UnweightedPairGroupMethodWithArithmeticMeanExtra.txt");
        String expected =
                "0->28:25.500\n" +
                "1->36:59.500\n" +
                "2->36:59.500\n" +
                "3->37:67.750\n" +
                "4->27:25.000\n" +
                "5->29:27.000\n" +
                "6->33:45.000\n" +
                "7->27:25.000\n" +
                "8->30:28.000\n" +
                "9->39:117.250\n" +
                "10->44:168.000\n" +
                "11->35:45.750\n" +
                "12->32:30.000\n" +
                "13->31:28.500\n" +
                "14->41:131.667\n" +
                "15->33:45.000\n" +
                "16->44:168.000\n" +
                "17->28:25.500\n" +
                "18->38:68.500\n" +
                "19->34:45.500\n" +
                "20->32:30.000\n" +
                "21->34:45.500\n" +
                "22->38:68.500\n" +
                "23->30:28.000\n" +
                "24->29:27.000\n" +
                "25->31:28.500\n" +
                "26->48:235.375\n" +
                "27->4:25.000\n" +
                "27->35:20.750\n" +
                "27->7:25.000\n" +
                "28->17:25.500\n" +
                "28->40:101.125\n" +
                "28->0:25.500\n" +
                "29->24:27.000\n" +
                "29->5:27.000\n" +
                "29->37:40.750\n" +
                "30->8:28.000\n" +
                "30->42:128.125\n" +
                "30->23:28.000\n" +
                "31->25:28.500\n" +
                "31->13:28.500\n" +
                "31->45:201.125\n" +
                "32->12:30.000\n" +
                "32->43:134.375\n" +
                "32->20:30.000\n" +
                "33->39:72.250\n" +
                "33->6:45.000\n" +
                "33->15:45.000\n" +
                "34->42:110.625\n" +
                "34->19:45.500\n" +
                "34->21:45.500\n" +
                "35->41:85.917\n" +
                "35->27:20.750\n" +
                "35->11:45.750\n" +
                "36->1:59.500\n" +
                "36->43:104.875\n" +
                "36->2:59.500\n" +
                "37->3:67.750\n" +
                "37->49:189.155\n" +
                "37->29:40.750\n" +
                "38->40:58.125\n" +
                "38->18:68.500\n" +
                "38->22:68.500\n" +
                "39->9:117.250\n" +
                "39->33:72.250\n" +
                "39->46:113.417\n" +
                "40->38:58.125\n" +
                "40->28:101.125\n" +
                "40->45:103.000\n" +
                "41->35:85.917\n" +
                "41->14:131.667\n" +
                "41->50:127.068\n" +
                "42->48:79.250\n" +
                "42->30:128.125\n" +
                "42->34:110.625\n" +
                "43->32:134.375\n" +
                "43->46:66.292\n" +
                "43->36:104.875\n" +
                "44->47:67.292\n" +
                "44->16:168.000\n" +
                "44->10:168.000\n" +
                "45->31:201.125\n" +
                "45->47:5.667\n" +
                "45->40:103.000\n" +
                "46->39:113.417\n" +
                "46->43:66.292\n" +
                "46->49:26.238\n" +
                "47->44:67.292\n" +
                "47->50:23.443\n" +
                "47->45:5.667\n" +
                "48->26:235.375\n" +
                "48->52:59.289\n" +
                "48->42:79.250\n" +
                "49->51:29.874\n" +
                "49->46:26.238\n" +
                "49->37:189.155\n" +
                "50->41:127.068\n" +
                "50->47:23.443\n" +
                "50->51:28.045\n" +
                "51->52:7.884\n" +
                "51->50:28.045\n" +
                "51->49:29.874\n" +
                "52->48:59.289\n" +
                "52->51:7.884";
        Assert.assertEquals(outputAsSet(result), outputAsSet(expected));
    }
}
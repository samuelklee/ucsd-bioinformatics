package ucsd.IV;

import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class NeighborJoiningTest {
    private static Set<String> outputAsSet(String output) {
        return new HashSet<>(Arrays.asList(output.split("\n")));
    }

    @Test
    public void test() {
        String result = NeighborJoining.doWork("src/test/resources/IV/sample/NeighborJoining.txt");
        String expected =
                "0->4:8.000\n" +
                "1->5:13.500\n" +
                "2->5:16.500\n" +
                "3->4:12.000\n" +
                "4->5:2.000\n" +
                "4->0:8.000\n" +
                "4->3:12.000\n" +
                "5->1:13.500\n" +
                "5->2:16.500\n" +
                "5->4:2.000";
        Assert.assertEquals(outputAsSet(result), outputAsSet(expected));
    }

    @Test
    public void testExtra() {
        String result = NeighborJoining.doWork("src/test/resources/IV/sample/NeighborJoiningExtra.txt");
        String expected =
                "0->37:535.180\n" +
                "1->33:583.052\n" +
                "2->34:483.348\n" +
                "3->39:559.810\n" +
                "4->46:643.500\n" +
                "5->35:565.065\n" +
                "6->46:511.500\n" +
                "7->52:657.127\n" +
                "8->49:685.382\n" +
                "9->36:570.721\n" +
                "10->41:524.655\n" +
                "11->32:555.917\n" +
                "12->32:601.083\n" +
                "13->41:523.345\n" +
                "14->44:456.521\n" +
                "15->39:469.190\n" +
                "16->42:500.387\n" +
                "17->43:546.559\n" +
                "18->38:534.995\n" +
                "19->40:593.574\n" +
                "20->43:512.441\n" +
                "21->42:565.612\n" +
                "22->40:540.426\n" +
                "23->35:553.935\n" +
                "24->36:523.279\n" +
                "25->53:590.083\n" +
                "26->37:506.820\n" +
                "27->33:520.948\n" +
                "28->53:563.917\n" +
                "29->44:578.479\n" +
                "30->34:543.652\n" +
                "31->45:593.445\n" +
                "32->12:601.083\n" +
                "32->38:66.505\n" +
                "32->11:555.917\n" +
                "33->27:520.948\n" +
                "33->50:147.482\n" +
                "33->1:583.052\n" +
                "34->51:165.321\n" +
                "34->2:483.348\n" +
                "34->30:543.652\n" +
                "35->5:565.065\n" +
                "35->45:84.555\n" +
                "35->23:553.935\n" +
                "36->9:570.721\n" +
                "36->60:185.876\n" +
                "36->24:523.279\n" +
                "37->0:535.180\n" +
                "37->48:90.196\n" +
                "37->26:506.820\n" +
                "38->32:66.505\n" +
                "38->48:95.054\n" +
                "38->18:534.995\n" +
                "39->49:116.118\n" +
                "39->3:559.810\n" +
                "39->15:469.190\n" +
                "40->47:99.233\n" +
                "40->19:593.574\n" +
                "40->22:540.426\n" +
                "41->47:68.267\n" +
                "41->13:523.345\n" +
                "41->10:524.655\n" +
                "42->21:565.612\n" +
                "42->54:137.676\n" +
                "42->16:500.387\n" +
                "43->20:512.441\n" +
                "43->50:97.018\n" +
                "43->17:546.559\n" +
                "44->29:578.479\n" +
                "44->51:58.429\n" +
                "44->14:456.521\n" +
                "45->59:156.655\n" +
                "45->35:84.555\n" +
                "45->31:593.445\n" +
                "46->4:643.500\n" +
                "46->57:153.393\n" +
                "46->6:511.500\n" +
                "47->40:99.233\n" +
                "47->41:68.267\n" +
                "47->56:132.253\n" +
                "48->37:90.196\n" +
                "48->38:95.054\n" +
                "48->55:131.146\n" +
                "49->52:49.123\n" +
                "49->8:685.382\n" +
                "49->39:116.118\n" +
                "50->43:97.018\n" +
                "50->33:147.482\n" +
                "50->61:118.300\n" +
                "51->59:85.720\n" +
                "51->44:58.429\n" +
                "51->34:165.321\n" +
                "52->49:49.123\n" +
                "52->55:40.401\n" +
                "52->7:657.127\n" +
                "53->25:590.083\n" +
                "53->54:26.324\n" +
                "53->28:563.917\n" +
                "54->57:56.982\n" +
                "54->53:26.324\n" +
                "54->42:137.676\n" +
                "55->48:131.146\n" +
                "55->52:40.401\n" +
                "55->56:26.677\n" +
                "56->47:132.253\n" +
                "56->55:26.677\n" +
                "56->58:41.110\n" +
                "57->54:56.982\n" +
                "57->46:153.393\n" +
                "57->58:28.948\n" +
                "58->57:28.948\n" +
                "58->56:41.110\n" +
                "58->61:38.608\n" +
                "59->51:85.720\n" +
                "59->60:25.812\n" +
                "59->45:156.655\n" +
                "60->59:25.812\n" +
                "60->36:185.876\n" +
                "60->61:14.060\n" +
                "61->60:14.060\n" +
                "61->50:118.300\n" +
                "61->58:38.608";
        //internal nodes labeled differently
        Assert.assertEquals(outputAsSet(result).size(), outputAsSet(expected).size());
    }
}